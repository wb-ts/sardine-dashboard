version: "3"
services:
  db:
    container_name: dashboard_db
    build:
      context: .
      dockerfile: postgres.Dockerfile
    image: dashboard_db
    volumes:
      - dashboard_pgdata:/var/lib/postgresql/data
    networks:
      - web
  api:
    build:
      context: .
      dockerfile: deployments/dockerfiles/api/Dockerfile
    restart: on-failure
    container_name: dashboard_api
    ports:
      - "4001:4001"
    environment:
      - DB_CONNECTION_STRING=postgres://sardineadmin:Yn(Y)Q7mWZC4}>qC@db:5432/sardinedb
      - DB_USERNAME=sardineadmin
      - DB_PASSWORD=Yn(Y)Q7mWZC4}>qC
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=sardinedb
    networks:
      - web
  # elasticsearch:
  #   container_name: quesst_elasticsearch
  #   image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
  #   volumes:
  #     - esdata:/usr/share/elasticsearch/data
  #   environment:
  #     - bootstrap.memory_lock=true
  #     - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
  #     - discovery.type=single-node
  #   logging:
  #     driver: none
  #   ports:
  #     - 9300:9300
  #     - 9200:9200
  #   networks:
  #     - web
  # kibana:
  #   image: docker.elastic.co/kibana/kibana:7.7.0
  #   environment:
  #     SERVER_NAME: kibana
  #     ELASTICSEARCH_HOSTS: http://elasticsearch:9200
  #   ports:
  #     - "5601:5601"
  #   networks:
  #     - web
  # frontend:
  #   build:
  #     context: ./frontend
  #     dockerfile: Dockerfile.dev
  #   volumes:
  #     - /app/node_modules
  #     - ./frontend:/app
  #   environment:
  #     - PROXY_TARGET=http://api:3001
  #   ports:
  #     - '3000:3000'
  #   stdin_open: true
  #   restart: on-failure
  #   container_name: dashboard_frontend
  #   networks:
  #     - web
volumes:
  dashboard_pgdata:
  # esdata:
networks:
  web:
